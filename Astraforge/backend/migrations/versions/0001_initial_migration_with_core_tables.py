"""Initial migration with core tables

Revision ID: 0001
Revises: 
Create Date: 2025-09-12 00:53:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create missions table
    op.create_table('missions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=200), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('objectives', sa.JSON(), nullable=False),
        sa.Column('spacecraft_config', sa.JSON(), nullable=False),
        sa.Column('trajectory', sa.JSON(), nullable=False),
        sa.Column('timeline', sa.JSON(), nullable=False),
        sa.Column('constraints', sa.JSON(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('user_id', sa.String(length=100), nullable=True),
        sa.Column('is_public', sa.Boolean(), nullable=False),
        sa.Column('difficulty_rating', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_missions_created_at', 'missions', ['created_at'], unique=False)
    op.create_index('idx_missions_difficulty', 'missions', ['difficulty_rating'], unique=False)
    op.create_index('idx_missions_is_public', 'missions', ['is_public'], unique=False)
    op.create_index('idx_missions_user_id', 'missions', ['user_id'], unique=False)
    
    # Create simulation_results table
    op.create_table('simulation_results',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('mission_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('simulation_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('success_probability', sa.Float(), nullable=False),
        sa.Column('total_duration_days', sa.Float(), nullable=False),
        sa.Column('fuel_consumption_kg', sa.Float(), nullable=False),
        sa.Column('cost_estimate_usd', sa.Float(), nullable=False),
        sa.Column('risk_factors', sa.JSON(), nullable=False),
        sa.Column('performance_metrics', sa.JSON(), nullable=False),
        sa.Column('trajectory_data', sa.JSON(), nullable=True),
        sa.Column('fuel_usage_timeline', sa.JSON(), nullable=True),
        sa.Column('system_performance', sa.JSON(), nullable=True),
        sa.Column('simulation_timestamp', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['mission_id'], ['missions.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_simulation_results_mission_id', 'simulation_results', ['mission_id'], unique=False)
    op.create_index('idx_simulation_results_success_prob', 'simulation_results', ['success_probability'], unique=False)
    op.create_index('idx_simulation_results_timestamp', 'simulation_results', ['simulation_timestamp'], unique=False)
    
    # Create vehicle_presets table
    op.create_table('vehicle_presets',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('vehicle_type', sa.String(length=50), nullable=False),
        sa.Column('configuration', sa.JSON(), nullable=False),
        sa.Column('is_public', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('created_by', sa.String(length=100), nullable=True),
        sa.Column('mass_kg', sa.Float(), nullable=False),
        sa.Column('thrust_n', sa.Float(), nullable=False),
        sa.Column('specific_impulse_s', sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_index('idx_vehicle_presets_mass', 'vehicle_presets', ['mass_kg'], unique=False)
    op.create_index('idx_vehicle_presets_public', 'vehicle_presets', ['is_public'], unique=False)
    op.create_index('idx_vehicle_presets_thrust', 'vehicle_presets', ['thrust_n'], unique=False)
    op.create_index('idx_vehicle_presets_type', 'vehicle_presets', ['vehicle_type'], unique=False)
    
    # Create optimization_jobs table
    op.create_table('optimization_jobs',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('mission_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('job_type', sa.String(length=50), nullable=False),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('parameters', sa.JSON(), nullable=False),
        sa.Column('constraints', sa.JSON(), nullable=False),
        sa.Column('objectives', sa.JSON(), nullable=False),
        sa.Column('results', sa.JSON(), nullable=True),
        sa.Column('pareto_front', sa.JSON(), nullable=True),
        sa.Column('best_solution', sa.JSON(), nullable=True),
        sa.Column('progress_percent', sa.Float(), nullable=False),
        sa.Column('current_generation', sa.Integer(), nullable=True),
        sa.Column('total_generations', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('started_at', sa.DateTime(), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['mission_id'], ['missions.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_optimization_jobs_created_at', 'optimization_jobs', ['created_at'], unique=False)
    op.create_index('idx_optimization_jobs_mission_id', 'optimization_jobs', ['mission_id'], unique=False)
    op.create_index('idx_optimization_jobs_status', 'optimization_jobs', ['status'], unique=False)
    
    # Create user_sessions table
    op.create_table('user_sessions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('session_token', sa.String(length=255), nullable=False),
        sa.Column('user_id', sa.String(length=100), nullable=True),
        sa.Column('email', sa.String(length=255), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('last_accessed', sa.DateTime(), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('preferences', sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('session_token')
    )
    op.create_index('idx_user_sessions_active', 'user_sessions', ['is_active'], unique=False)
    op.create_index('idx_user_sessions_expires_at', 'user_sessions', ['expires_at'], unique=False)
    op.create_index('idx_user_sessions_token', 'user_sessions', ['session_token'], unique=False)
    op.create_index('idx_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_sessions_user_id', table_name='user_sessions')
    op.drop_index('idx_user_sessions_token', table_name='user_sessions')
    op.drop_index('idx_user_sessions_expires_at', table_name='user_sessions')
    op.drop_index('idx_user_sessions_active', table_name='user_sessions')
    op.drop_table('user_sessions')
    
    op.drop_index('idx_optimization_jobs_status', table_name='optimization_jobs')
    op.drop_index('idx_optimization_jobs_mission_id', table_name='optimization_jobs')
    op.drop_index('idx_optimization_jobs_created_at', table_name='optimization_jobs')
    op.drop_table('optimization_jobs')
    
    op.drop_index('idx_vehicle_presets_type', table_name='vehicle_presets')
    op.drop_index('idx_vehicle_presets_thrust', table_name='vehicle_presets')
    op.drop_index('idx_vehicle_presets_public', table_name='vehicle_presets')
    op.drop_index('idx_vehicle_presets_mass', table_name='vehicle_presets')
    op.drop_table('vehicle_presets')
    
    op.drop_index('idx_simulation_results_timestamp', table_name='simulation_results')
    op.drop_index('idx_simulation_results_success_prob', table_name='simulation_results')
    op.drop_index('idx_simulation_results_mission_id', table_name='simulation_results')
    op.drop_table('simulation_results')
    
    op.drop_index('idx_missions_user_id', table_name='missions')
    op.drop_index('idx_missions_is_public', table_name='missions')
    op.drop_index('idx_missions_difficulty', table_name='missions')
    op.drop_index('idx_missions_created_at', table_name='missions')
    op.drop_table('missions')
    # ### end Alembic commands ###